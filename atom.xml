<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iJasonY的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ijason.me/"/>
  <updated>2018-05-27T07:47:51.030Z</updated>
  <id>http://blog.ijason.me/</id>
  
  <author>
    <name>iJasonY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>巧用一个小技巧实现自动打包完成后发邮件通知到相关人员</title>
    <link href="http://blog.ijason.me/p/e030e36e/"/>
    <id>http://blog.ijason.me/p/e030e36e/</id>
    <published>2018-05-27T01:36:31.000Z</published>
    <updated>2018-05-27T07:47:51.030Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h3><p>   最近在公司里利用 <code>Jenkins</code> 来实施自动化打包时，遇到一个问题就是：我在打包完成后要如何及时的通知到产品与测试等相关人员。</p><h4 id="搁浅"><a href="#搁浅" class="headerlink" title="搁浅"></a>搁浅</h4><p>   原本是打算在自动化流程内写些脚本去调用邮件服务实现，但是在网上查找了几篇文章后，感觉过程都较为复杂，在实施过程中出现了一些问题没法及时有效的找到原因（PS:毕竟我没有专门去学习过 <code>Shell</code>、<code>Python</code> 等脚本语言)，同时目前自己工作也比较繁忙所以也更加无暇去研究了，于是就这样一直搁置了这个需求。</p><h4 id="柳暗花明"><a href="#柳暗花明" class="headerlink" title="柳暗花明"></a>柳暗花明</h4><p>   后来有一天，我发现发测试包的发布平台每次都会在我上传测试包成功后给我的邮箱发送一封发布成功的通知邮件</p><p>   于是灵机一动：我们是不是可以利用这个通知邮件来做点什么呢？🤔 <a id="more"></a> </p><p>   后来想起来邮箱里好像有一个叫“收信规则”的服务。嗯~ 对，就是它，我们完全可以利用它来办到呀。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>   此时这个问题的解决方法就很明朗了，我们只需设置下收信规则就行了，(注：以下设置是在QQ邮箱内的设置步骤，其他邮箱还请自行探索哈) 具体设置步骤如下：</p><p>   首先打开你的QQ邮箱-&gt;在页面左上角的有个”设置”点击进去，然后切换到”收信规则”选项卡-&gt;在页面右测有个“创建收信规则”按钮，点击进去你会看到以下的页面，接下来的具体设置见图<br><img src="http://image.ijason.me/WX20180527-103652.png" alt="20180527-103652"></p><p>   这样设置完后，到时候发包平台的通知邮件一旦发送到你邮箱里 就会自动转发到你设置的那个邮箱里。至此整个问题得到解决</p><h3 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h3><p>   这个方法目前还存在着几个问题：</p><ol><li>严重依赖于第三方发布平台的邮件通知，如果第三方发布平台的邮件通知由于一些原因没有发出，那么我们的整个流程也就跟着受到影响。</li><li>邮件内容受制于第三方平台的邮件内容，无法自己定制邮件内容。</li><li>邮箱的“收信规则”服务一次只能转发一个邮箱，且无法设置一个邮件组；那么如果我要通知多人怎么办？(目前我这边是设置了多个类似的规则去实现，但是如果需要通知的人数众多的时候，这方法就显得有点捉襟见肘了，因为规则太多，维护的成本太高)</li></ol><p>接下来我将继续寻找更好的解决方法，同时如果您有更好的方法或者思路，还望不吝赐教。Peace~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题背景：&quot;&gt;&lt;a href=&quot;#问题背景：&quot; class=&quot;headerlink&quot; title=&quot;问题背景：&quot;&gt;&lt;/a&gt;问题背景：&lt;/h3&gt;&lt;p&gt;   最近在公司里利用 &lt;code&gt;Jenkins&lt;/code&gt; 来实施自动化打包时，遇到一个问题就是：我在打包完成后要如何及时的通知到产品与测试等相关人员。&lt;/p&gt;
&lt;h4 id=&quot;搁浅&quot;&gt;&lt;a href=&quot;#搁浅&quot; class=&quot;headerlink&quot; title=&quot;搁浅&quot;&gt;&lt;/a&gt;搁浅&lt;/h4&gt;&lt;p&gt;   原本是打算在自动化流程内写些脚本去调用邮件服务实现，但是在网上查找了几篇文章后，感觉过程都较为复杂，在实施过程中出现了一些问题没法及时有效的找到原因（PS:毕竟我没有专门去学习过 &lt;code&gt;Shell&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt; 等脚本语言)，同时目前自己工作也比较繁忙所以也更加无暇去研究了，于是就这样一直搁置了这个需求。&lt;/p&gt;
&lt;h4 id=&quot;柳暗花明&quot;&gt;&lt;a href=&quot;#柳暗花明&quot; class=&quot;headerlink&quot; title=&quot;柳暗花明&quot;&gt;&lt;/a&gt;柳暗花明&lt;/h4&gt;&lt;p&gt;   后来有一天，我发现发测试包的发布平台每次都会在我上传测试包成功后给我的邮箱发送一封发布成功的通知邮件&lt;/p&gt;
&lt;p&gt;   于是灵机一动：我们是不是可以利用这个通知邮件来做点什么呢？🤔
    
    </summary>
    
      <category term="ci" scheme="http://blog.ijason.me/categories/ci/"/>
    
    
      <category term="jenkins" scheme="http://blog.ijason.me/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>git 的 .gitignore 配置</title>
    <link href="http://blog.ijason.me/p/98bf8440/"/>
    <id>http://blog.ijason.me/p/98bf8440/</id>
    <published>2018-04-30T17:08:14.000Z</published>
    <updated>2018-05-01T04:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你正在使用 git 做版本管理，想必对 <code>.gitignore</code> 文件并不会陌生 <code>.gitignore</code> 配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利。</p><h3 id="配置语法："><a href="#配置语法：" class="headerlink" title="配置语法："></a>配置语法：</h3><ul><li>以斜杠“/”开头表示目录；</li><li>以星号“*”通配多个字符；</li><li>以问号“?”通配单个字符；</li><li>以方括号“[]”包含单个字符的匹配列表；</li><li>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</li></ul><p>此外，git 对于 <code>.gitignore</code> 配置文件是按行从上到下进行规则匹配的，这意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效。<br><a id="more"></a></p><h3 id="规则示例与说明："><a href="#规则示例与说明：" class="headerlink" title="规则示例与说明："></a>规则示例与说明：</h3><ol><li><p>规则：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd1/*</span><br></pre></td></tr></table></figure><p> 说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略。</p></li><li><p>规则：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/fd1/*</span><br></pre></td></tr></table></figure><p> 说明：忽略根目录下的 /fd1/ 目录的全部内容。</p></li><li><p>规则：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    </span><br><span class="line">!.gitignore</span><br><span class="line">    </span><br><span class="line">!/fw/bin/</span><br><span class="line">    </span><br><span class="line">!/fw/sf/</span><br></pre></td></tr></table></figure><p> 说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录。</p></li></ol><h3 id="范例："><a href="#范例：" class="headerlink" title="范例："></a>范例：</h3><ol><li><p>忽略<em>.o和</em>.a文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.[oa]</span><br></pre></td></tr></table></figure></li><li><p>忽略<em>.b和</em>.B文件，my.b除外</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.[bB]</span><br><span class="line"></span><br><span class="line">!my.b</span><br></pre></td></tr></table></figure></li><li><p>忽略dbg文件和dbg目录</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbg</span><br></pre></td></tr></table></figure></li><li><p>只忽略dbg目录，不忽略dbg文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbg/</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>只忽略dbg文件，不忽略dbg目录 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbg</span><br><span class="line">!dbg/</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dbg</span><br></pre></td></tr></table></figure></li></ol><h3 id="为什么我增加了-gitignore文件，-但是里面的规则却没有生效？"><a href="#为什么我增加了-gitignore文件，-但是里面的规则却没有生效？" class="headerlink" title="为什么我增加了.gitignore文件， 但是里面的规则却没有生效？"></a>为什么我增加了<code>.gitignore</code>文件， 但是里面的规则却没有生效？</h3><p>这是因为我们误解了<code>.gitignore</code>文件的用途，该文件只能作用于 <strong>Untracked Files</strong>，也就是那些从来没有被 git 记录过的文件（自添加以后，从未被 add 及 commit 过的文件）。</p><p>之所以你的规则不生效，是因为那些文件曾经被 git 记录过，因此 <code>.gitignore</code> 对它们完全无效。</p><p>所以如果你不慎在创建 .gitignore 文件之前就 push 了项目，那么即使你在 .gitignore 文件中写入新的过滤规则，这些规则也不会起作用，git 仍然会对所有文件进行版本管理。</p><p>简单来说，出现这种问题的原因就是 git 已经开始管理这些文件了，所以你无法再通过过滤规则来过滤它们。</p><p>所以大家记得一定要养成在项目开始就创建 <code>.gitignore</code> 文件的习惯，否则一旦 <code>push</code>，处理起来会比较麻烦。</p><p>那么有没有办法解决呢？</p><p>答案是：有的。</p><h3 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h3><p>  比如说现在有一个 nodejs 项目，一开始的时候就忘记了创建 <code>.gitignore</code> 文件忽略掉 node_modules 的内容，所以其中的内容已经被提交了。</p><p>  即使你紧接着在 <code>.gitignore</code> 加了一行 node_modules , 已经被提交的文件是不会自动删除的。</p><p>  所以这时候你就需要做的就是：</p><ol><li><p>从 git 的数据库中删除对于该文件的追踪；</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached filePath (filePath 为文件路径)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>nodejs案例就是</span><br><span class="line">git rm --cached node_modules</span><br></pre></td></tr></table></figure></li><li><p>把对应的规则写入 <code>.gitignore</code>，让忽略真正生效；</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#nodejs案例就是在 .gitignore 文件里添加一下内容</span><br><span class="line"></span><br><span class="line">node_modules/</span><br></pre></td></tr></table></figure></li><li><p>提交 ＋ 推送。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>例如</span><br><span class="line">git commit -m 'delete remote some file'</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><h3 id="gitignore文件的妙用"><a href="#gitignore文件的妙用" class="headerlink" title=".gitignore文件的妙用"></a><code>.gitignore</code>文件的妙用</h3><p><code>.gitignore</code> 还有个有意思的小功能， 一个空的 <code>.gitignore</code> 文件可以被当作是一个 <code>placeholder</code> 。当你需要为项目创建一个空的 log 目录时， 这就变的很有用。</p><p>例如你可以创建一个 log 目录 在里面放置一个空的 <code>.gitignore</code> 文件。这样当你 clone 这个 repo 的时候 git 会自动的创建好一个空的 log 目录了。（正常情况下 git 是不会推送一个空目录到 repo 的）</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p><a href="https://git-scm.com/docs/git-rm/" target="_blank" rel="noopener">git-rm Documentation</a> </p></li><li><p><a href="https://segmentfault.com/q/1010000000430426/" target="_blank" rel="noopener">git忽略已经被提交的文件</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你正在使用 git 做版本管理，想必对 &lt;code&gt;.gitignore&lt;/code&gt; 文件并不会陌生 &lt;code&gt;.gitignore&lt;/code&gt; 配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利。&lt;/p&gt;
&lt;h3 id=&quot;配置语法：&quot;&gt;&lt;a href=&quot;#配置语法：&quot; class=&quot;headerlink&quot; title=&quot;配置语法：&quot;&gt;&lt;/a&gt;配置语法：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以斜杠“/”开头表示目录；&lt;/li&gt;
&lt;li&gt;以星号“*”通配多个字符；&lt;/li&gt;
&lt;li&gt;以问号“?”通配单个字符；&lt;/li&gt;
&lt;li&gt;以方括号“[]”包含单个字符的匹配列表；&lt;/li&gt;
&lt;li&gt;以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，git 对于 &lt;code&gt;.gitignore&lt;/code&gt; 配置文件是按行从上到下进行规则匹配的，这意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效。&lt;br&gt;
    
    </summary>
    
      <category term="随记" scheme="http://blog.ijason.me/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://blog.ijason.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>如何在Ubuntu 14.04下安装Node.js</title>
    <link href="http://blog.ijason.me/p/c918e033/"/>
    <id>http://blog.ijason.me/p/c918e033/</id>
    <published>2016-11-28T10:23:20.000Z</published>
    <updated>2018-04-03T02:36:52.404Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在自己的VPS上面捣鼓东西，却不小心把先前已经装好的Node环境给…给…搞坏了（ps:别问我是怎么搞玩坏的，因为我也想知道😂 ）那么问题来了，搞坏了肿么办。。。(画外音:笨啊，重装呀，重装不会吗？) </p><p>对吼，重装，自己作的妖，跪着也要把它弄好（膝盖君: 我招谁惹谁了😭 ），于是乎拿起键盘就是 敲 ~</p><h3 id="先安装下依赖"><a href="#先安装下依赖" class="headerlink" title="先安装下依赖"></a>先安装下依赖</h3><p>要在绝大多数*nix系的系统中编译Node.js,只要确保系统中有C/C++编译器以及OpenSSL库就可以了，如果没有安装起来也是比较容易的，在Ubuntu下只需执行以下命令就可以很方便的安装<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install g++ libssl-dev apache2-utils curl</span><br></pre></td></tr></table></figure><h3 id="然后下载Node-js源码到本地并解压缩"><a href="#然后下载Node-js源码到本地并解压缩" class="headerlink" title="然后下载Node.js源码到本地并解压缩"></a>然后下载Node.js源码到本地并解压缩</h3><p>ok 安装完依赖接下来我们再下载安装Node.js 源码包 (ps: 我这里安装的是V0.10.24版,大家可以自己选择所需的版本)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz</span><br><span class="line">tar -xzvf node-v0.10.24.tar.gz</span><br></pre></td></tr></table></figure><h3 id="进入到解压缩的目录进行编译和安装"><a href="#进入到解压缩的目录进行编译和安装" class="headerlink" title="进入到解压缩的目录进行编译和安装"></a>进入到解压缩的目录进行编译和安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd node-v0.10.24 </span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make test </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="最后再确保下安装是否成功"><a href="#最后再确保下安装是否成功" class="headerlink" title="最后再确保下安装是否成功"></a>最后再确保下安装是否成功</h3><p>在系统终端下输入并执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果安装成功的话就会显示当前安装的Node.js的版本号</p><p>OK, 打完收工！！！（膝盖君: 谢天谢地，终于好了😒 ）</p><p>怎么样是不是挺简单的哈</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>据说还有个更方便的安装方式，就是用apt-get命令安装，不过我没实际操作过，大家可以试下，具体命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天在自己的VPS上面捣鼓东西，却不小心把先前已经装好的Node环境给…给…搞坏了（ps:别问我是怎么搞玩坏的，因为我也想知道😂 ）那么问题来了，搞坏了肿么办。。。(画外音:笨啊，重装呀，重装不会吗？) &lt;/p&gt;
&lt;p&gt;对吼，重装，自己作的妖，跪着也要把它弄好（膝盖君: 我招谁惹谁了😭 ），于是乎拿起键盘就是 敲 ~&lt;/p&gt;
&lt;h3 id=&quot;先安装下依赖&quot;&gt;&lt;a href=&quot;#先安装下依赖&quot; class=&quot;headerlink&quot; title=&quot;先安装下依赖&quot;&gt;&lt;/a&gt;先安装下依赖&lt;/h3&gt;&lt;p&gt;要在绝大多数*nix系的系统中编译Node.js,只要确保系统中有C/C++编译器以及OpenSSL库就可以了，如果没有安装起来也是比较容易的，在Ubuntu下只需执行以下命令就可以很方便的安装&lt;br&gt;
    
    </summary>
    
      <category term="随记" scheme="http://blog.ijason.me/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.ijason.me/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>加密算法简介</title>
    <link href="http://blog.ijason.me/p/c47aa1c0/"/>
    <id>http://blog.ijason.me/p/c47aa1c0/</id>
    <published>2016-07-14T11:55:55.000Z</published>
    <updated>2018-04-03T02:36:52.404Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单的概念"><a href="#简单的概念" class="headerlink" title="简单的概念"></a>简单的概念</h4><ul><li>明文：加密前的信息</li><li>密文：加密后的信息</li><li>加密算法：加密或解密的算法</li><li>密钥：算法使用的钥匙</li></ul><h4 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h4><pre><code>eg: 将123456每位数字都加1后得到234567 </code></pre> <a id="more"></a>    <p>  在这个例子中：</p><ul><li><p>明文是：123456</p></li><li><p>密文是：234567</p></li><li><p>加密密钥是：1</p></li><li><p>加密算法是：每位加</p></li></ul><h4 id="加密算法种类"><a href="#加密算法种类" class="headerlink" title="加密算法种类"></a>加密算法种类</h4><p>  按照加密的方式我们可以将加密算法大体分成一下三种：</p><ul><li>对称加密算法（加密和解密算法是对称的可能有点抽象你可以理解成同一把钥匙）</li><li>非对称加密算法（加密和解密算法是非对称的可以理解成加密的时候是一把钥匙解密的时候是一把钥匙，典型的就是rsa公钥和私钥）</li><li>经典哈希算法（哈希算法是一种散列算法，有个特殊性是它是不可逆只能通过穷举法超大量的计算才可能算出，一般几率很小，还有就是你同一段的明文两次加密出来的结果是不一样的）</li></ul><h4 id="算法举例"><a href="#算法举例" class="headerlink" title="算法举例"></a>算法举例</h4><ul><li>对称加密算法：DES算法，3DES算法，TDEA算法，Blowfish算法，RC5算法，IDEA算法，AES算法。</li><li>非对称加密算法：RSA、Elgamal、背包算法、Rabin、D-H、ECC。</li><li>经典的哈希算法：MD2、MD4、MD5 和 SHA-1（目的是将任意长输入通过算法变为固定长输出，且保证输入变化一点输出都不同，且不能反向解密）</li></ul><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>  非对称加密算法可能是世界上最重要的算法，它是当今电子商务等领域的基石。</p><p>  简而言之，非对称加密就是指加密公钥和解密密钥是不同的，而且加密公钥和解密密钥是成对出现。非对称加密又叫公钥加密，也就是说成对的密钥，其中一个是对外公开的，所有人都可以获得，人们称之为公钥；而与之相对应的称之为私钥，只有这对密钥的生成者才能拥有。</p><p>  对于一个私钥，有且只有一个与之对应的公钥。公钥公开给任何人，私钥通常是只有生成者拥有。公/私钥通常是1024位或者2048位，越长安全系数越高，但是解密越困难。尽管拿到了公钥，如果没有私钥，要想解密那几乎是不可能的，至少现在在世界上还没有人公开出来说成功解密的。</p><p>  关于公钥和私钥总结一句话：公钥和密钥成对出现，其中公钥负责加密 ，私钥负责解密</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简单的概念&quot;&gt;&lt;a href=&quot;#简单的概念&quot; class=&quot;headerlink&quot; title=&quot;简单的概念&quot;&gt;&lt;/a&gt;简单的概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;明文：加密前的信息&lt;/li&gt;
&lt;li&gt;密文：加密后的信息&lt;/li&gt;
&lt;li&gt;加密算法：加密或解密的算法&lt;/li&gt;
&lt;li&gt;密钥：算法使用的钥匙&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;简单的例子&quot;&gt;&lt;a href=&quot;#简单的例子&quot; class=&quot;headerlink&quot; title=&quot;简单的例子&quot;&gt;&lt;/a&gt;简单的例子&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;eg: 将123456每位数字都加1后得到234567 
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="随记" scheme="http://blog.ijason.me/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="密码技术" scheme="http://blog.ijason.me/tags/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>我想念你的多种方式</title>
    <link href="http://blog.ijason.me/p/b25ac606/"/>
    <id>http://blog.ijason.me/p/b25ac606/</id>
    <published>2016-07-11T12:02:26.000Z</published>
    <updated>2018-04-03T02:36:52.404Z</updated>
    
    <content type="html"><![CDATA[<p>　　比如，我改变一种习惯，从前我不吃胡萝卜，现在我开始吃胡萝卜，这样每次我吃胡萝卜的时候，都想到你；</p><p>　　比如，从现在开始，一年之内，我搭乘公车，都提前一站下来，走路到目的地，这样我可以慢下来，看看周围的人和树，还有店铺，它们沉默不语，我也是，因为我想到了你；<br>　　<a id="more"></a><br>　　比如，有一个词我永远都不用，每次要用到的时候，我很小心，绕开它，换过一个词，这样我又想到你一次；</p><p>　　比如，每次我到大街上，如果我很高兴，我就大声叫你的名字，你的名字听起来这么普通，所以，我每次叫你，都会有人回过头来看我，以为我叫的是他们，他们也许对我笑，也许露出困惑的表情，我很高兴，我觉得也许有一次，回头看我的人正好是你；</p><p>　　比如，夏天的时候，天气太热了，我把手里的水从头上淋下来，这么凉，我把这个行为叫做你；</p><p>　　比如，我喝酒，我从前常常和你一起喝酒，我一口气喝完了整杯酒，我把这个俗气，而又常见的喝酒方式，都宣称是和你喝酒时才用的；</p><p>　　比如，我要去锻炼了，我是这么讨厌锻炼的人，但你叫我去锻炼，我就去锻炼，这样我每次都皱着眉头，想起你一次；</p><p>　　比如，我不怎么提起，也不怎么去你的那个城市了，但正因为如此，我反而常常想起那里，想起你；</p><p>　　比如，在路上，我看见每个陌生人，他们或者高兴，或者悲伤，或者面无表情，我都觉得他们是有理由的，因为他们不认识你；而我自己或者高兴，或者悲伤，或者面无表情，都是有理由的，因为我认识你；这样子随时随地都可能想起你；</p><p>　　比如，我找到那些和我一样认识你的人，他们或者提起你，或者不提起你，但我知道都和你有关，不管我见到几个人，但至少都要想到你一次；</p><p>　　比如，我阅读那些俗气的书，阅读那些高深的书，都有可能想到你，因为你就是这么无孔不入，既阅读俗气的书，又阅读高深的书；</p><p>　　比如，我写小故事给你，因为你要我写小故事给你，我始终都没有写，这次我终于写了，故事里的人和你有一点像，我每看一次，就想到你一次；</p><p>　　比如，《Perfect Day》，这首歌我也很喜欢，你也很喜欢，这个词我也很喜欢，你也很喜欢，但我被你打败了，这个词归你了，这首歌归你了，它变成你喜欢的，我才喜欢了；别人也被你打败了，他们都变成因为你喜欢，所以我才会注意到他们也喜欢；</p><p>　　比如，以后我不能玩捉迷藏游戏，因为每次我都想到你藏起来了，我可能找不到你；但我又会很想要玩捉迷藏游戏，因为到最后，我总归是找得到你的。这样子，无论我玩不玩捉迷藏游戏，我都会想到你；</p><p>　　比如，有一天我无意中找到一本书，那上面有你的签名，又有一天我无意中找到了一张相片，那上面有你，我把它们拿给别人看，说：瞧，我有这么好的东西。那个时候我可能已经有点老，记性也不太好，不过还是想到你一次；</p><p>　　比如，有一天有人问我，认不认识你，记不记得关于你的事情，我回答说：记得。于是我把所有关于你的事情，又想了一遍；</p><p>　　比如，有一天有人问我，认不认识你，记不记得关于你的事情，我回答说：不记得。但是我在心里，把所有关于你的事情，又想了一遍；</p><p>　　比如，你最好马上出现在我面前，嘲笑我，对我哈哈大笑，这样子我会马上原谅你，并且给你看这篇东西，我会同样哈哈大笑，说：我一点都不想念你。不过这样说其实是因为我有点羞涩。</p><p>　　比如。比如。</p><p>　　比如我写下来，这一篇给你，给马骅。我自己又从头看了一遍，觉得可以给你了。给马骅。天已经亮了，从天很黑到天开始亮，有好几个小时，我都想到你了。我的朋友会跟我提到这一篇，提到一次，就又想到你一次。</p><p>　　— 摘自饭饭著作《路上有惊慌》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　比如，我改变一种习惯，从前我不吃胡萝卜，现在我开始吃胡萝卜，这样每次我吃胡萝卜的时候，都想到你；&lt;/p&gt;
&lt;p&gt;　　比如，从现在开始，一年之内，我搭乘公车，都提前一站下来，走路到目的地，这样我可以慢下来，看看周围的人和树，还有店铺，它们沉默不语，我也是，因为我想到了你；&lt;br&gt;
    
    </summary>
    
      <category term="随记" scheme="http://blog.ijason.me/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="文摘" scheme="http://blog.ijason.me/tags/%E6%96%87%E6%91%98/"/>
    
  </entry>
  
</feed>
